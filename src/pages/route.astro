---
import { readFileSync } from 'fs';
import path from 'path';
import Papa from 'papaparse';
import Layout from '../layouts/PageLayout.astro';
import ButtonLink from '../components/ButtonLink';

const csvFilePath = path.resolve('./src/content/schedule.csv');
const csvFileContent = readFileSync(csvFilePath, 'utf8');

type Dates = {
    day: string;
    date: Date;
    distance: number;
    start: string;
    startProvince: string;
    end: string;
    endProvince: string;
    description?: string;
    accomodations?: string;
};

const results = Papa.parse<Dates>(csvFileContent, { header: true, dynamicTyping: true,  
    transform: (value, field) => {
    if (field === 'date') {
      return new Date(value);
    }
    return value;
  }, 
}).data;

const formatDate = new Intl.DateTimeFormat('en-CA', {
    day: 'numeric',
    month: 'short',
    timeZone: 'UTC'
  }).format;
  const formatDistance = Intl.NumberFormat('en-CA', {
    maximumFractionDigits: 2,
    unit: 'kilometer',
    style:'unit'
  }).format;
---

<Layout title="Schedule" frontmatter={{ pathname: '/route' }}>
      <h1>Route</h1>
      <p>
          If you're interested in running with me, please reach out to me on social media. I'd love 
          to have you join me for a few kilometers!
      </p>
      <div class="map-wrapper">
        <iframe class="map" src="https://www.google.com/maps/d/embed?mid=1T-QHKFuBgcD0Dvf5KOiiE9d485-pQmM&ehbc=2E312F&noprof=1"></iframe>
      </div>
      <p style="font-size: 0.8rem; font-style: italic">
        This map shows my approximate route. Each dot represents one day of progress.
      </p>
      <br />
      <h2>Schedule</h2> 
      <div class="scrollable-table">
            <table>
                <thead>
                    <tr>
                        <th>Day</th>
                        <th>Date</th>
                        <th>Total Distance</th>
                        <th>Location</th>
                        <th>Accomodations</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>
                    {results.map((row, i) => {
                      const skipped = i === 11;
                      return (
                        <tr style="position: relative;">
                          {!skipped && <>
                            <td>{row.day}</td>
                            <td>{formatDate(row.date)}</td>
                            <td>{formatDistance(row.distance)}</td>
                            <td>{row.start}, {row.startProvince} - {row.end}, {row.endProvince}</td>
                            <td>{row.description}</td>
                            {row.accomodations ? <td style="position: sticky; right: 0; background: linear-gradient(90deg, #f5f5f500 0%, #f5f5f5ff 8%); padding-left: 1.2rem; padding-right: 0">
                              <ButtonLink href={row.accomodations} external size='small' color='rgb(var(--accent))' textColor='#fff'>
                                Have a place I can stay?
                              </ButtonLink>
                            </td> : <td></td>}
                            </>}
                            {skipped && <>
                            <td>--</td>
                            <td>--</td>
                            <td>--</td>
                            <td><del>{row.start}, {row.startProvince} - {row.end}, {row.endProvince}</del></td>
                            <td>{row.description}</td>
                            <td></td>
                             </>
                            }
                        </tr>
                      )})}
                </tbody>
            </table>
        </div>
  <style>

    .scrollable-table {
        display: grid;
        overflow-x: auto;
        padding: 1rem 0;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }

    th {
        text-transform: uppercase;
        font-size: 0.7rem;
        text-align: left;
    }

    thead {
      background-color: rgb(var(--text-color), 0.1);
    }

    th, td {
      border-top: 1px solid rgb(var(--text-color), 0.2);
      padding: 0.75rem 0.5rem;
    }

    td {
        white-space: nowrap;
        font-size: 0.8rem;
    }

    .map-wrapper {
      overflow:hidden;
      padding-bottom:60%;
      position:relative;
      height:0;
      background: #f5f5f5;
      border-radius: 0.5rem;
      box-shadow: 0 0 1rem rgba(var(--text-color), 0.2);
      @media (max-width: 700px){
        padding-bottom: 80%;
      }
      @media (max-width: 500px){
        padding-bottom: 100%;
      }
    }

    .map {
      left:0;
      top:0;
      height:100%;
      width:100%;
      position:absolute;
      border: 0;
      
    }
  </style>
</Layout>../components/ButtonLink.tsx