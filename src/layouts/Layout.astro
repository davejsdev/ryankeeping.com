---
import { fade, ViewTransitions } from 'astro:transitions'
import { SITE_NAME, DESCRIPTION, SHARE_IMAGE } from '../../src/config'
import Card from '../components/Card.astro';
import { Image } from 'astro:assets';
import Nav from '../components/Nav.astro';

interface Props {
	title: string;
}

// @ts-ignore - TODO figure otu type safety on this
const { frontmatter } = Astro.props

const isHome = Astro.url.pathname === '/'

const pageTitle = [
	frontmatter.title ? frontmatter.title : undefined,
	isHome ? SITE_NAME : undefined,
].filter(Boolean).join(' | ')

const links	= frontmatter.content.links as { title: string; url: string, icon: any }[]
const navLinks	= frontmatter.content.nav as { title: string; url: string, icon: any }[]
---

<!doctype html>
<html 
	lang="en"
	transition:animate={fade({ duration: '1s' })}
>
	<head>
		<meta charset="UTF-8" />
		<meta name="image" property="og:image" content={ SHARE_IMAGE }>
		<meta name="description" content={ DESCRIPTION } />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{ pageTitle }</title>
		<ViewTransitions />
	</head>
	<body>
		<div class="container">
			<Nav />
			<main>
				<slot />
				{links && (
					<ul class="link-list horizontal">
						{links.map((link, i) => (
							<li class="link-item">
								<a class="link" href={link.url} target="_blank" rel="noopener noreferrer">
									<Card>
										{link.icon && <Image src={`/${link.icon}`} alt={link.title} width={24} height={24}  />}
										{link.title}
										</Card>
									</a>
							</li>
						))}
					</ul>
				)}
			</main>
			
			<footer>
				<p>&copy; {new Date().getFullYear()} {SITE_NAME}</p>
			</footer>
		</div>
	</body>
	</html>
	<style is:global>
		:root {
			--text-color: 255, 255, 255;
		--background-color: 25, 25, 30;
		--accent: 146, 8, 14;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html, body {
		font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
		color: rgb(var(--text-color));
		background: rgb(var(--background-color));
		margin: 0;
		box-sizing: border-box;

		background-image: linear-gradient(
			170deg,
			rgba(var(--accent), 1) 0,
			rgba(var(--accent), 1) 35rem,
			rgba(var(--accent), 0.5) 35rem,
			rgba(var(--accent), 0.5) calc(35rem + 1rem),
			#f5f5f5 calc(35rem + 1rem)
		);

		background-size: 4000px;
		background-position: center 0;

		background-color: #f5f5f5;
		--text-color: 0, 0, 0;
	}

	*, *:before, *:after {
		box-sizing: inherit;
	}

	/* Light mode */
	@media (prefers-color-scheme: light) {
		:root {
			--text-color: 0, 0, 0;
			--background-color: 225, 225, 225;
		}
	}

	.container {
		display: grid;
		min-height: 100vh;
		max-width: 600px;
		margin: auto;
		padding: 2rem 1rem;
		gap: 1rem;
		grid-template-rows: 1fr auto;
	}

	main {
		display: grid;
		padding-top: 6rem;
		gap: 1.5rem;
		align-items: start;
		align-content: center;
		text-align: center;
	}

	footer {
		text-align: center;
		color: rgba(var(--text-color), 0.75);
		font-size: 0.8rem;
	}

	h1, h2 {
		text-align: center;
		margin: 0;
	}

	h2 {
		font-style: italic;
		font-size: 1.25rem;
	}

	.profile-image {
		margin: auto;
		border-radius: 0.5rem;
		box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.2);
	}

	.link {
		font-weight: 600;
		font-size: 0.8rem;
		text-transform: uppercase;
		text-align: center;
		text-decoration: none;
		display: flex;
		transition: background-color 0.2s ease-in-out;

		.card {
			padding: 1rem;
		}
		.card:focus {
			outline: 1px solid rgb(var(--text-color));
			outline-offset: 2px;
		}

		.card:hover {
			background-color: #f5f5f5;
		}

	}

	.link-list {
		list-style: none;
		padding: 0;
		margin: 0;
		display: grid;
		gap: 1rem;
		align-items: stretch;
		justify-items: stretch;
		align-content: normal;

		&.horizontal {
			grid-auto-flow: column;
			grid-auto-columns: minmax(0, 1fr);
			
			.link {
				flex-direction: column;
				font-size: 0.5rem;
			}

			.card {
				display: flex;
				flex-direction: column;
				gap: 0.5rem;
				justify-content: center;
				align-items: center;
				padding: 0.75rem;
			}
		}
	}
	
</style>
